# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.10

import enum
import datetime
import sys
import types
import typing

import winsdk.system
import winsdk.windows.applicationmodel
import winsdk.windows.applicationmodel.activation
import winsdk.windows.applicationmodel.appointments.appointmentsprovider
import winsdk.windows.applicationmodel.background
import winsdk.windows.applicationmodel.calls
import winsdk.windows.applicationmodel.contacts
import winsdk.windows.applicationmodel.contacts.provider
import winsdk.windows.applicationmodel.core
import winsdk.windows.applicationmodel.datatransfer
import winsdk.windows.applicationmodel.datatransfer.sharetarget
import winsdk.windows.applicationmodel.search
import winsdk.windows.applicationmodel.userdataaccounts.provider
import winsdk.windows.applicationmodel.wallet
import winsdk.windows.devices.enumeration
import winsdk.windows.devices.printers.extensions
import winsdk.windows.foundation
import winsdk.windows.foundation.collections
import winsdk.windows.media.speechrecognition
import winsdk.windows.security.authentication.web
import winsdk.windows.security.authentication.web.provider
import winsdk.windows.storage
import winsdk.windows.storage.pickers.provider
import winsdk.windows.storage.provider
import winsdk.windows.storage.search
import winsdk.windows.storage.streams
import winsdk.windows.system
import winsdk.windows.ui
import winsdk.windows.web
import winsdk.windows.web.http
import winsdk.windows.web.ui

class PrintContent(enum.IntEnum):
    ALL_PAGES = 0
    CURRENT_PAGE = 1
    CUSTOM_PAGE_RANGE = 2
    CURRENT_SELECTION = 3

Self = typing.TypeVar('Self')

class ActivatedDeferral(winsdk.system.Object):
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ActivatedDeferral: ...
    def complete(self) -> None: ...

class ActivatedOperation(winsdk.system.Object):
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ActivatedOperation: ...
    def get_deferral(self) -> typing.Optional[ActivatedDeferral]: ...

class BackgroundActivatedEventArgs(winsdk.system.Object):
    task_instance: typing.Optional[winsdk.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> BackgroundActivatedEventArgs: ...

class EnteredBackgroundEventArgs(winsdk.system.Object):
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> EnteredBackgroundEventArgs: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.foundation.Deferral]: ...

class HtmlPrintDocumentSource(winsdk.system.Object):
    top_margin: winsdk.system.Single
    shrink_to_fit: winsdk.system.Boolean
    right_margin: winsdk.system.Single
    percent_scale: winsdk.system.Single
    left_margin: winsdk.system.Single
    enable_header_footer: winsdk.system.Boolean
    content: PrintContent
    bottom_margin: winsdk.system.Single
    page_range: str
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> HtmlPrintDocumentSource: ...
    def close(self) -> None: ...
    def try_set_page_range(self, str_page_range: str, /) -> winsdk.system.Boolean: ...

class LeavingBackgroundEventArgs(winsdk.system.Object):
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> LeavingBackgroundEventArgs: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.foundation.Deferral]: ...

class NewWebUIViewCreatedEventArgs(winsdk.system.Object):
    activated_event_args: typing.Optional[winsdk.windows.applicationmodel.activation.IActivatedEventArgs]
    has_pending_navigate: winsdk.system.Boolean
    web_u_i_view: typing.Optional[WebUIView]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> NewWebUIViewCreatedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.foundation.Deferral]: ...

class SuspendingDeferral(winsdk.system.Object):
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> SuspendingDeferral: ...
    def complete(self) -> None: ...

class SuspendingEventArgs(winsdk.system.Object):
    suspending_operation: typing.Optional[winsdk.windows.applicationmodel.SuspendingOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> SuspendingEventArgs: ...

class SuspendingOperation(winsdk.system.Object):
    deadline: datetime.datetime
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> SuspendingOperation: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.applicationmodel.SuspendingDeferral]: ...

class WebUIApplication(winsdk.system.Object):
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIApplication: ...
    @staticmethod
    def enable_prelaunch(value: winsdk.system.Boolean, /) -> None: ...
    @staticmethod
    def request_restart_async(launch_arguments: str, /) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.applicationmodel.core.AppRestartFailureReason]: ...
    @staticmethod
    def request_restart_for_user_async(user: typing.Optional[winsdk.windows.system.User], launch_arguments: str, /) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.applicationmodel.core.AppRestartFailureReason]: ...
    @staticmethod
    def add_background_activated(handler: typing.Optional[BackgroundActivatedEventHandler], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_background_activated(token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_new_web_u_i_view_created(handler: winsdk.windows.foundation.EventHandler[NewWebUIViewCreatedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_new_web_u_i_view_created(token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_entered_background(handler: typing.Optional[EnteredBackgroundEventHandler], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_entered_background(token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_leaving_background(handler: typing.Optional[LeavingBackgroundEventHandler], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_leaving_background(token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_activated(handler: typing.Optional[ActivatedEventHandler], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_activated(token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_navigated(handler: typing.Optional[NavigatedEventHandler], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_navigated(token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_resuming(handler: typing.Optional[ResumingEventHandler], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_resuming(token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    @staticmethod
    def add_suspending(handler: typing.Optional[SuspendingEventHandler], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_suspending(token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    add_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIAppointmentsProviderAddAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    remove_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    replace_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    instance_start_date: typing.Optional[typing.Optional[datetime.datetime]]
    local_id: str
    roaming_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    duration: datetime.timedelta
    time_to_show: datetime.datetime
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class WebUIBackgroundTaskInstance(winsdk.system.Object):
    current: typing.ClassVar[typing.Optional[IWebUIBackgroundTaskInstance]]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIBackgroundTaskInstance: ...

class WebUIBackgroundTaskInstanceRuntimeClass(winsdk.system.Object):
    progress: winsdk.system.UInt32
    instance_id: winsdk.system.Guid
    suspended_count: winsdk.system.UInt32
    task: typing.Optional[winsdk.windows.applicationmodel.background.BackgroundTaskRegistration]
    trigger_details: typing.Optional[winsdk.system.Object]
    succeeded: winsdk.system.Boolean
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIBackgroundTaskInstanceRuntimeClass: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.applicationmodel.background.BackgroundTaskDeferral]: ...
    def add_canceled(self, cancel_handler: typing.Optional[winsdk.windows.applicationmodel.background.BackgroundTaskCanceledEventHandler], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUIBarcodeScannerPreviewActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    connection_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIBarcodeScannerPreviewActivatedEventArgs: ...

class WebUICachedFileUpdaterActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    cached_file_updater_u_i: typing.Optional[winsdk.windows.storage.provider.CachedFileUpdaterUI]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUICachedFileUpdaterActivatedEventArgs: ...

class WebUICameraSettingsActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    video_device_controller: typing.Optional[winsdk.system.Object]
    video_device_extension: typing.Optional[winsdk.system.Object]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUICameraSettingsActivatedEventArgs: ...

class WebUICommandLineActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    operation: typing.Optional[winsdk.windows.applicationmodel.activation.CommandLineActivationOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUICommandLineActivatedEventArgs: ...

class WebUIContactCallActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    verb: str
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIContactCallActivatedEventArgs: ...

class WebUIContactMapActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    verb: str
    address: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactAddress]
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIContactMapActivatedEventArgs: ...

class WebUIContactMessageActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    verb: str
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIContactMessageActivatedEventArgs: ...

class WebUIContactPanelActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactPanel]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIContactPanelActivatedEventArgs: ...

class WebUIContactPickerActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    contact_picker_u_i: typing.Optional[winsdk.windows.applicationmodel.contacts.provider.ContactPickerUI]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIContactPickerActivatedEventArgs: ...

class WebUIContactPostActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    verb: str
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIContactPostActivatedEventArgs: ...

class WebUIContactVideoCallActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    verb: str
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIContactVideoCallActivatedEventArgs: ...

class WebUIDeviceActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    device_information_id: str
    verb: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIDeviceActivatedEventArgs: ...

class WebUIDevicePairingActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    device_information: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIDevicePairingActivatedEventArgs: ...

class WebUIDialReceiverActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    app_name: str
    arguments: str
    tile_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIDialReceiverActivatedEventArgs: ...

class WebUIFileActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]
    verb: str
    neighboring_files_query: typing.Optional[winsdk.windows.storage.search.StorageFileQueryResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIFileActivatedEventArgs: ...

class WebUIFileOpenPickerActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    file_open_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileOpenPickerUI]
    caller_package_family_name: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIFileOpenPickerActivatedEventArgs: ...

class WebUIFileOpenPickerContinuationEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIFileOpenPickerContinuationEventArgs: ...

class WebUIFileSavePickerActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    file_save_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileSavePickerUI]
    caller_package_family_name: str
    enterprise_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIFileSavePickerActivatedEventArgs: ...

class WebUIFileSavePickerContinuationEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    file: typing.Optional[winsdk.windows.storage.StorageFile]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIFileSavePickerContinuationEventArgs: ...

class WebUIFolderPickerContinuationEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    folder: typing.Optional[winsdk.windows.storage.StorageFolder]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIFolderPickerContinuationEventArgs: ...

class WebUILaunchActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    arguments: str
    tile_id: str
    tile_activated_info: typing.Optional[winsdk.windows.applicationmodel.activation.TileActivatedInfo]
    prelaunch_activated: winsdk.system.Boolean
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUILaunchActivatedEventArgs: ...

class WebUILockScreenActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    info: typing.Optional[winsdk.system.Object]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUILockScreenActivatedEventArgs: ...

class WebUILockScreenCallActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    currently_shown_application_view_id: winsdk.system.Int32
    arguments: str
    tile_id: str
    call_u_i: typing.Optional[winsdk.windows.applicationmodel.calls.LockScreenCallUI]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUILockScreenCallActivatedEventArgs: ...

class WebUILockScreenComponentActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUILockScreenComponentActivatedEventArgs: ...

class WebUINavigatedDeferral(winsdk.system.Object):
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUINavigatedDeferral: ...
    def complete(self) -> None: ...

class WebUINavigatedEventArgs(winsdk.system.Object):
    navigated_operation: typing.Optional[WebUINavigatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUINavigatedEventArgs: ...

class WebUINavigatedOperation(winsdk.system.Object):
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUINavigatedOperation: ...
    def get_deferral(self) -> typing.Optional[WebUINavigatedDeferral]: ...

class WebUIPhoneCallActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    line_id: winsdk.system.Guid
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIPhoneCallActivatedEventArgs: ...

class WebUIPrint3DWorkflowActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    workflow: typing.Optional[winsdk.windows.devices.printers.extensions.Print3DWorkflow]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIPrint3DWorkflowActivatedEventArgs: ...

class WebUIPrintTaskSettingsActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    configuration: typing.Optional[winsdk.windows.devices.printers.extensions.PrintTaskConfiguration]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIPrintTaskSettingsActivatedEventArgs: ...

class WebUIPrintWorkflowForegroundTaskActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIPrintWorkflowForegroundTaskActivatedEventArgs: ...

class WebUIProtocolActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIProtocolActivatedEventArgs: ...

class WebUIProtocolForResultsActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    protocol_for_results_operation: typing.Optional[winsdk.windows.system.ProtocolForResultsOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIProtocolForResultsActivatedEventArgs: ...

class WebUIRestrictedLaunchActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    shared_context: typing.Optional[winsdk.system.Object]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIRestrictedLaunchActivatedEventArgs: ...

class WebUISearchActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    currently_shown_application_view_id: winsdk.system.Int32
    language: str
    query_text: str
    linguistic_details: typing.Optional[winsdk.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUISearchActivatedEventArgs: ...

class WebUIShareTargetActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    share_operation: typing.Optional[winsdk.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIShareTargetActivatedEventArgs: ...

class WebUIStartupTaskActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    task_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIStartupTaskActivatedEventArgs: ...

class WebUIToastNotificationActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    argument: str
    user_input: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIToastNotificationActivatedEventArgs: ...

class WebUIUserDataAccountProviderActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    operation: typing.Optional[winsdk.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIUserDataAccountProviderActivatedEventArgs: ...

class WebUIView(winsdk.system.Object):
    ignore_application_content_uri_rules_navigation_restrictions: winsdk.system.Boolean
    application_view_id: winsdk.system.Int32
    source: typing.Optional[winsdk.windows.foundation.Uri]
    default_background_color: winsdk.windows.ui.Color
    can_go_back: winsdk.system.Boolean
    can_go_forward: winsdk.system.Boolean
    contains_full_screen_element: winsdk.system.Boolean
    deferred_permission_requests: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.web.ui.WebViewControlDeferredPermissionRequest]]
    document_title: str
    settings: typing.Optional[winsdk.windows.web.ui.WebViewControlSettings]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIView: ...
    def add_initialize_script(self, script: str, /) -> None: ...
    def build_local_stream_uri(self, content_identifier: str, relative_path: str, /) -> typing.Optional[winsdk.windows.foundation.Uri]: ...
    def capture_preview_to_stream_async(self, stream: typing.Optional[winsdk.windows.storage.streams.IRandomAccessStream], /) -> winsdk.windows.foundation.IAsyncAction: ...
    def capture_selected_content_to_data_package_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.applicationmodel.datatransfer.DataPackage]: ...
    @typing.overload
    @staticmethod
    def create_async() -> winsdk.windows.foundation.IAsyncOperation[WebUIView]: ...
    @typing.overload
    @staticmethod
    def create_async(uri: typing.Optional[winsdk.windows.foundation.Uri], /) -> winsdk.windows.foundation.IAsyncOperation[WebUIView]: ...
    def get_deferred_permission_request_by_id(self, id: winsdk.system.UInt32, /) -> typing.Optional[winsdk.windows.web.ui.WebViewControlDeferredPermissionRequest]: ...
    def go_back(self) -> None: ...
    def go_forward(self) -> None: ...
    def invoke_script_async(self, script_name: str, arguments: typing.Iterable[str], /) -> winsdk.windows.foundation.IAsyncOperation[str]: ...
    def navigate(self, source: typing.Optional[winsdk.windows.foundation.Uri], /) -> None: ...
    def navigate_to_local_stream_uri(self, source: typing.Optional[winsdk.windows.foundation.Uri], stream_resolver: typing.Optional[winsdk.windows.web.IUriToStreamResolver], /) -> None: ...
    def navigate_to_string(self, text: str, /) -> None: ...
    def navigate_with_http_request_message(self, request_message: typing.Optional[winsdk.windows.web.http.HttpRequestMessage], /) -> None: ...
    def refresh(self) -> None: ...
    def stop(self) -> None: ...
    def add_activated(self, handler: winsdk.windows.foundation.TypedEventHandler[WebUIView, winsdk.windows.applicationmodel.activation.IActivatedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: winsdk.windows.foundation.TypedEventHandler[WebUIView, winsdk.system.Object], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_contains_full_screen_element_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.system.Object], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_contains_full_screen_element_changed(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_content_loading(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlContentLoadingEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_content_loading(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_d_o_m_content_loaded(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlDOMContentLoadedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_d_o_m_content_loaded(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_content_loading(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlContentLoadingEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_content_loading(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_d_o_m_content_loaded(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlDOMContentLoadedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_d_o_m_content_loaded(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_completed(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNavigationCompletedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_completed(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_starting(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNavigationStartingEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_starting(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_long_running_script_detected(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlLongRunningScriptDetectedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_long_running_script_detected(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_completed(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNavigationCompletedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_completed(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_starting(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNavigationStartingEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_starting(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_new_window_requested(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNewWindowRequestedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_new_window_requested(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_permission_requested(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlPermissionRequestedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_permission_requested(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_script_notify(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlScriptNotifyEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_script_notify(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unsafe_content_warning_displaying(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.system.Object], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_unsafe_content_warning_displaying(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unsupported_uri_scheme_identified(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_unsupported_uri_scheme_identified(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unviewable_content_identified(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlUnviewableContentIdentifiedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_unviewable_content_identified(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_web_resource_requested(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlWebResourceRequestedEventArgs], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_web_resource_requested(self, token: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...

class WebUIVoiceCommandActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    result: typing.Optional[winsdk.windows.media.speechrecognition.SpeechRecognitionResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIVoiceCommandActivatedEventArgs: ...

class WebUIWalletActionActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    action_id: str
    action_kind: winsdk.windows.applicationmodel.wallet.WalletActionKind
    item_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIWalletActionActivatedEventArgs: ...

class WebUIWebAccountProviderActivatedEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    operation: typing.Optional[winsdk.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIWebAccountProviderActivatedEventArgs: ...

class WebUIWebAuthenticationBrokerContinuationEventArgs(winsdk.system.Object):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    web_authentication_result: typing.Optional[winsdk.windows.security.authentication.web.WebAuthenticationResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebUIWebAuthenticationBrokerContinuationEventArgs: ...

class IActivatedEventArgsDeferral(winsdk.system.Object):
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IActivatedEventArgsDeferral: ...

class IWebUIBackgroundTaskInstance(winsdk.system.Object):
    succeeded: winsdk.system.Boolean
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IWebUIBackgroundTaskInstance: ...

class IWebUINavigatedEventArgs(winsdk.system.Object):
    navigated_operation: typing.Optional[WebUINavigatedOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IWebUINavigatedEventArgs: ...

ActivatedEventHandler = typing.Callable[[typing.Optional[winsdk.system.Object], typing.Optional[winsdk.windows.applicationmodel.activation.IActivatedEventArgs]], None]

BackgroundActivatedEventHandler = typing.Callable[[typing.Optional[winsdk.system.Object], typing.Optional[winsdk.windows.applicationmodel.activation.IBackgroundActivatedEventArgs]], None]

EnteredBackgroundEventHandler = typing.Callable[[typing.Optional[winsdk.system.Object], typing.Optional[winsdk.windows.applicationmodel.IEnteredBackgroundEventArgs]], None]

LeavingBackgroundEventHandler = typing.Callable[[typing.Optional[winsdk.system.Object], typing.Optional[winsdk.windows.applicationmodel.ILeavingBackgroundEventArgs]], None]

NavigatedEventHandler = typing.Callable[[typing.Optional[winsdk.system.Object], typing.Optional[IWebUINavigatedEventArgs]], None]

ResumingEventHandler = typing.Callable[[typing.Optional[winsdk.system.Object]], None]

SuspendingEventHandler = typing.Callable[[typing.Optional[winsdk.system.Object], typing.Optional[winsdk.windows.applicationmodel.ISuspendingEventArgs]], None]

