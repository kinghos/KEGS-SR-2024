# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.10

import enum
import datetime
import sys
import types
import typing

import winsdk.system
import winsdk.windows.applicationmodel.appointments.appointmentsprovider
import winsdk.windows.applicationmodel.background
import winsdk.windows.applicationmodel.calls
import winsdk.windows.applicationmodel.contacts
import winsdk.windows.applicationmodel.contacts.provider
import winsdk.windows.applicationmodel.datatransfer.sharetarget
import winsdk.windows.applicationmodel.search
import winsdk.windows.applicationmodel.userdataaccounts.provider
import winsdk.windows.applicationmodel.wallet
import winsdk.windows.devices.enumeration
import winsdk.windows.devices.printers.extensions
import winsdk.windows.foundation
import winsdk.windows.foundation.collections
import winsdk.windows.media.speechrecognition
import winsdk.windows.security.authentication.web
import winsdk.windows.security.authentication.web.provider
import winsdk.windows.storage
import winsdk.windows.storage.pickers.provider
import winsdk.windows.storage.provider
import winsdk.windows.storage.search
import winsdk.windows.system
import winsdk.windows.ui.notifications
import winsdk.windows.ui.viewmanagement

class ActivationKind(enum.IntEnum):
    LAUNCH = 0
    SEARCH = 1
    SHARE_TARGET = 2
    FILE = 3
    PROTOCOL = 4
    FILE_OPEN_PICKER = 5
    FILE_SAVE_PICKER = 6
    CACHED_FILE_UPDATER = 7
    CONTACT_PICKER = 8
    DEVICE = 9
    PRINT_TASK_SETTINGS = 10
    CAMERA_SETTINGS = 11
    RESTRICTED_LAUNCH = 12
    APPOINTMENTS_PROVIDER = 13
    CONTACT = 14
    LOCK_SCREEN_CALL = 15
    VOICE_COMMAND = 16
    LOCK_SCREEN = 17
    PICKER_RETURNED = 1000
    WALLET_ACTION = 1001
    PICK_FILE_CONTINUATION = 1002
    PICK_SAVE_FILE_CONTINUATION = 1003
    PICK_FOLDER_CONTINUATION = 1004
    WEB_AUTHENTICATION_BROKER_CONTINUATION = 1005
    WEB_ACCOUNT_PROVIDER = 1006
    COMPONENT_U_I = 1007
    PROTOCOL_FOR_RESULTS = 1009
    TOAST_NOTIFICATION = 1010
    PRINT3_D_WORKFLOW = 1011
    DIAL_RECEIVER = 1012
    DEVICE_PAIRING = 1013
    USER_DATA_ACCOUNTS_PROVIDER = 1014
    FILE_PICKER_EXPERIENCE = 1015
    LOCK_SCREEN_COMPONENT = 1016
    CONTACT_PANEL = 1017
    PRINT_WORKFLOW_FOREGROUND_TASK = 1018
    GAME_U_I_PROVIDER = 1019
    STARTUP_TASK = 1020
    COMMAND_LINE_LAUNCH = 1021
    BARCODE_SCANNER_PROVIDER = 1022
    PRINT_SUPPORT_JOB_U_I = 1023
    PRINT_SUPPORT_SETTINGS_U_I = 1024
    PHONE_CALL_ACTIVATION = 1025
    VPN_FOREGROUND = 1026

class ApplicationExecutionState(enum.IntEnum):
    NOT_RUNNING = 0
    RUNNING = 1
    SUSPENDED = 2
    TERMINATED = 3
    CLOSED_BY_USER = 4

Self = typing.TypeVar('Self')

class AppointmentsProviderAddAppointmentActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    add_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> AppointmentsProviderAddAppointmentActivatedEventArgs: ...

class AppointmentsProviderRemoveAppointmentActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    remove_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> AppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class AppointmentsProviderReplaceAppointmentActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    replace_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> AppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class AppointmentsProviderShowAppointmentDetailsActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    instance_start_date: typing.Optional[typing.Optional[datetime.datetime]]
    local_id: str
    roaming_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> AppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class AppointmentsProviderShowTimeFrameActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    duration: datetime.timedelta
    time_to_show: datetime.datetime
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> AppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class BackgroundActivatedEventArgs(winsdk.system.Object):
    task_instance: typing.Optional[winsdk.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> BackgroundActivatedEventArgs: ...

class BarcodeScannerPreviewActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    connection_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> BarcodeScannerPreviewActivatedEventArgs: ...

class CachedFileUpdaterActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    cached_file_updater_u_i: typing.Optional[winsdk.windows.storage.provider.CachedFileUpdaterUI]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> CachedFileUpdaterActivatedEventArgs: ...

class CameraSettingsActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    video_device_controller: typing.Optional[winsdk.system.Object]
    video_device_extension: typing.Optional[winsdk.system.Object]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> CameraSettingsActivatedEventArgs: ...

class CommandLineActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    operation: typing.Optional[CommandLineActivationOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> CommandLineActivatedEventArgs: ...

class CommandLineActivationOperation(winsdk.system.Object):
    exit_code: winsdk.system.Int32
    arguments: str
    current_directory_path: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> CommandLineActivationOperation: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.foundation.Deferral]: ...

class ContactCallActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ContactCallActivatedEventArgs: ...

class ContactMapActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    address: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactAddress]
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ContactMapActivatedEventArgs: ...

class ContactMessageActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ContactMessageActivatedEventArgs: ...

class ContactPanelActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactPanel]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ContactPanelActivatedEventArgs: ...

class ContactPickerActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    contact_picker_u_i: typing.Optional[winsdk.windows.applicationmodel.contacts.provider.ContactPickerUI]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ContactPickerActivatedEventArgs: ...

class ContactPostActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ContactPostActivatedEventArgs: ...

class ContactVideoCallActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    verb: str
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ContactVideoCallActivatedEventArgs: ...

class DeviceActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    device_information_id: str
    verb: str
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> DeviceActivatedEventArgs: ...

class DevicePairingActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    device_information: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> DevicePairingActivatedEventArgs: ...

class DialReceiverActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    app_name: str
    arguments: str
    tile_id: str
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> DialReceiverActivatedEventArgs: ...

class FileActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]
    verb: str
    caller_package_family_name: str
    neighboring_files_query: typing.Optional[winsdk.windows.storage.search.StorageFileQueryResult]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> FileActivatedEventArgs: ...

class FileOpenPickerActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    file_open_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileOpenPickerUI]
    caller_package_family_name: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> FileOpenPickerActivatedEventArgs: ...

class FileOpenPickerContinuationEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> FileOpenPickerContinuationEventArgs: ...

class FileSavePickerActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    file_save_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileSavePickerUI]
    caller_package_family_name: str
    enterprise_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> FileSavePickerActivatedEventArgs: ...

class FileSavePickerContinuationEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    file: typing.Optional[winsdk.windows.storage.StorageFile]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> FileSavePickerContinuationEventArgs: ...

class FolderPickerContinuationEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    folder: typing.Optional[winsdk.windows.storage.StorageFolder]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> FolderPickerContinuationEventArgs: ...

class LaunchActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    arguments: str
    tile_id: str
    tile_activated_info: typing.Optional[TileActivatedInfo]
    prelaunch_activated: winsdk.system.Boolean
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> LaunchActivatedEventArgs: ...

class LockScreenActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    info: typing.Optional[winsdk.system.Object]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> LockScreenActivatedEventArgs: ...

class LockScreenCallActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    currently_shown_application_view_id: winsdk.system.Int32
    arguments: str
    tile_id: str
    call_u_i: typing.Optional[winsdk.windows.applicationmodel.calls.LockScreenCallUI]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> LockScreenCallActivatedEventArgs: ...

class LockScreenComponentActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> LockScreenComponentActivatedEventArgs: ...

class PhoneCallActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    line_id: winsdk.system.Guid
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> PhoneCallActivatedEventArgs: ...

class PickerReturnedActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    picker_operation_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> PickerReturnedActivatedEventArgs: ...

class Print3DWorkflowActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    workflow: typing.Optional[winsdk.windows.devices.printers.extensions.Print3DWorkflow]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> Print3DWorkflowActivatedEventArgs: ...

class PrintTaskSettingsActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    configuration: typing.Optional[winsdk.windows.devices.printers.extensions.PrintTaskConfiguration]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> PrintTaskSettingsActivatedEventArgs: ...

class ProtocolActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ProtocolActivatedEventArgs: ...

class ProtocolForResultsActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    protocol_for_results_operation: typing.Optional[winsdk.windows.system.ProtocolForResultsOperation]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ProtocolForResultsActivatedEventArgs: ...

class RestrictedLaunchActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    shared_context: typing.Optional[winsdk.system.Object]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> RestrictedLaunchActivatedEventArgs: ...

class SearchActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    language: str
    query_text: str
    linguistic_details: typing.Optional[winsdk.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> SearchActivatedEventArgs: ...

class ShareTargetActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    share_operation: typing.Optional[winsdk.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ShareTargetActivatedEventArgs: ...

class SplashScreen(winsdk.system.Object):
    image_location: winsdk.windows.foundation.Rect
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> SplashScreen: ...
    def add_dismissed(self, handler: winsdk.windows.foundation.TypedEventHandler[SplashScreen, winsdk.system.Object], /) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_dismissed(self, cookie: winsdk.windows.foundation.EventRegistrationToken, /) -> None: ...

class StartupTaskActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    task_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> StartupTaskActivatedEventArgs: ...

class TileActivatedInfo(winsdk.system.Object):
    recently_shown_notifications: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.ui.notifications.ShownTileNotification]]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> TileActivatedInfo: ...

class ToastNotificationActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: winsdk.system.Int32
    argument: str
    user_input: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ToastNotificationActivatedEventArgs: ...

class UserDataAccountProviderActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    operation: typing.Optional[winsdk.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> UserDataAccountProviderActivatedEventArgs: ...

class VoiceCommandActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    result: typing.Optional[winsdk.windows.media.speechrecognition.SpeechRecognitionResult]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> VoiceCommandActivatedEventArgs: ...

class WalletActionActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    action_id: str
    action_kind: winsdk.windows.applicationmodel.wallet.WalletActionKind
    item_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WalletActionActivatedEventArgs: ...

class WebAccountProviderActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    operation: typing.Optional[winsdk.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebAccountProviderActivatedEventArgs: ...

class WebAuthenticationBrokerContinuationEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    web_authentication_result: typing.Optional[winsdk.windows.security.authentication.web.WebAuthenticationResult]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> WebAuthenticationBrokerContinuationEventArgs: ...

class IActivatedEventArgs(winsdk.system.Object):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IActivatedEventArgs: ...

class IActivatedEventArgsWithUser(winsdk.system.Object):
    user: typing.Optional[winsdk.windows.system.User]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IActivatedEventArgsWithUser: ...

class IApplicationViewActivatedEventArgs(winsdk.system.Object):
    currently_shown_application_view_id: winsdk.system.Int32
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IApplicationViewActivatedEventArgs: ...

class IAppointmentsProviderActivatedEventArgs(winsdk.system.Object):
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IAppointmentsProviderActivatedEventArgs: ...

class IAppointmentsProviderAddAppointmentActivatedEventArgs(winsdk.system.Object):
    add_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IAppointmentsProviderAddAppointmentActivatedEventArgs: ...

class IAppointmentsProviderRemoveAppointmentActivatedEventArgs(winsdk.system.Object):
    remove_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IAppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class IAppointmentsProviderReplaceAppointmentActivatedEventArgs(winsdk.system.Object):
    replace_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IAppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(winsdk.system.Object):
    instance_start_date: typing.Optional[typing.Optional[datetime.datetime]]
    local_id: str
    roaming_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class IAppointmentsProviderShowTimeFrameActivatedEventArgs(winsdk.system.Object):
    duration: datetime.timedelta
    time_to_show: datetime.datetime
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IAppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class IBackgroundActivatedEventArgs(winsdk.system.Object):
    task_instance: typing.Optional[winsdk.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IBackgroundActivatedEventArgs: ...

class IBarcodeScannerPreviewActivatedEventArgs(winsdk.system.Object):
    connection_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IBarcodeScannerPreviewActivatedEventArgs: ...

class ICachedFileUpdaterActivatedEventArgs(winsdk.system.Object):
    cached_file_updater_u_i: typing.Optional[winsdk.windows.storage.provider.CachedFileUpdaterUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ICachedFileUpdaterActivatedEventArgs: ...

class ICameraSettingsActivatedEventArgs(winsdk.system.Object):
    video_device_controller: typing.Optional[winsdk.system.Object]
    video_device_extension: typing.Optional[winsdk.system.Object]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ICameraSettingsActivatedEventArgs: ...

class ICommandLineActivatedEventArgs(winsdk.system.Object):
    operation: typing.Optional[CommandLineActivationOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ICommandLineActivatedEventArgs: ...

class IContactActivatedEventArgs(winsdk.system.Object):
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactActivatedEventArgs: ...

class IContactCallActivatedEventArgs(winsdk.system.Object):
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactCallActivatedEventArgs: ...

class IContactMapActivatedEventArgs(winsdk.system.Object):
    address: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactAddress]
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactMapActivatedEventArgs: ...

class IContactMessageActivatedEventArgs(winsdk.system.Object):
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactMessageActivatedEventArgs: ...

class IContactPanelActivatedEventArgs(winsdk.system.Object):
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactPanel]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactPanelActivatedEventArgs: ...

class IContactPickerActivatedEventArgs(winsdk.system.Object):
    contact_picker_u_i: typing.Optional[winsdk.windows.applicationmodel.contacts.provider.ContactPickerUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactPickerActivatedEventArgs: ...

class IContactPostActivatedEventArgs(winsdk.system.Object):
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactPostActivatedEventArgs: ...

class IContactVideoCallActivatedEventArgs(winsdk.system.Object):
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    service_id: str
    service_user_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactVideoCallActivatedEventArgs: ...

class IContactsProviderActivatedEventArgs(winsdk.system.Object):
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContactsProviderActivatedEventArgs: ...

class IContinuationActivatedEventArgs(winsdk.system.Object):
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IContinuationActivatedEventArgs: ...

class IDeviceActivatedEventArgs(winsdk.system.Object):
    device_information_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IDeviceActivatedEventArgs: ...

class IDevicePairingActivatedEventArgs(winsdk.system.Object):
    device_information: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IDevicePairingActivatedEventArgs: ...

class IDialReceiverActivatedEventArgs(winsdk.system.Object):
    app_name: str
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IDialReceiverActivatedEventArgs: ...

class IFileActivatedEventArgs(winsdk.system.Object):
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileActivatedEventArgs: ...

class IFileActivatedEventArgsWithCallerPackageFamilyName(winsdk.system.Object):
    caller_package_family_name: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileActivatedEventArgsWithCallerPackageFamilyName: ...

class IFileActivatedEventArgsWithNeighboringFiles(winsdk.system.Object):
    neighboring_files_query: typing.Optional[winsdk.windows.storage.search.StorageFileQueryResult]
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileActivatedEventArgsWithNeighboringFiles: ...

class IFileOpenPickerActivatedEventArgs(winsdk.system.Object):
    file_open_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileOpenPickerUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileOpenPickerActivatedEventArgs: ...

class IFileOpenPickerActivatedEventArgs2(winsdk.system.Object):
    caller_package_family_name: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileOpenPickerActivatedEventArgs2: ...

class IFileOpenPickerContinuationEventArgs(winsdk.system.Object):
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileOpenPickerContinuationEventArgs: ...

class IFileSavePickerActivatedEventArgs(winsdk.system.Object):
    file_save_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileSavePickerUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileSavePickerActivatedEventArgs: ...

class IFileSavePickerActivatedEventArgs2(winsdk.system.Object):
    caller_package_family_name: str
    enterprise_id: str
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileSavePickerActivatedEventArgs2: ...

class IFileSavePickerContinuationEventArgs(winsdk.system.Object):
    file: typing.Optional[winsdk.windows.storage.StorageFile]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFileSavePickerContinuationEventArgs: ...

class IFolderPickerContinuationEventArgs(winsdk.system.Object):
    folder: typing.Optional[winsdk.windows.storage.StorageFolder]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IFolderPickerContinuationEventArgs: ...

class ILaunchActivatedEventArgs(winsdk.system.Object):
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ILaunchActivatedEventArgs: ...

class ILaunchActivatedEventArgs2(winsdk.system.Object):
    tile_activated_info: typing.Optional[TileActivatedInfo]
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ILaunchActivatedEventArgs2: ...

class ILockScreenActivatedEventArgs(winsdk.system.Object):
    info: typing.Optional[winsdk.system.Object]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ILockScreenActivatedEventArgs: ...

class ILockScreenCallActivatedEventArgs(winsdk.system.Object):
    call_u_i: typing.Optional[winsdk.windows.applicationmodel.calls.LockScreenCallUI]
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ILockScreenCallActivatedEventArgs: ...

class IPhoneCallActivatedEventArgs(winsdk.system.Object):
    line_id: winsdk.system.Guid
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IPhoneCallActivatedEventArgs: ...

class IPickerReturnedActivatedEventArgs(winsdk.system.Object):
    picker_operation_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IPickerReturnedActivatedEventArgs: ...

class IPrelaunchActivatedEventArgs(winsdk.system.Object):
    prelaunch_activated: winsdk.system.Boolean
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IPrelaunchActivatedEventArgs: ...

class IPrint3DWorkflowActivatedEventArgs(winsdk.system.Object):
    workflow: typing.Optional[winsdk.windows.devices.printers.extensions.Print3DWorkflow]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IPrint3DWorkflowActivatedEventArgs: ...

class IPrintTaskSettingsActivatedEventArgs(winsdk.system.Object):
    configuration: typing.Optional[winsdk.windows.devices.printers.extensions.PrintTaskConfiguration]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IPrintTaskSettingsActivatedEventArgs: ...

class IProtocolActivatedEventArgs(winsdk.system.Object):
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IProtocolActivatedEventArgs: ...

class IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData(winsdk.system.Object):
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData: ...

class IProtocolForResultsActivatedEventArgs(winsdk.system.Object):
    protocol_for_results_operation: typing.Optional[winsdk.windows.system.ProtocolForResultsOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IProtocolForResultsActivatedEventArgs: ...

class IRestrictedLaunchActivatedEventArgs(winsdk.system.Object):
    shared_context: typing.Optional[winsdk.system.Object]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IRestrictedLaunchActivatedEventArgs: ...

class ISearchActivatedEventArgs(winsdk.system.Object):
    language: str
    query_text: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ISearchActivatedEventArgs: ...

class ISearchActivatedEventArgsWithLinguisticDetails(winsdk.system.Object):
    linguistic_details: typing.Optional[winsdk.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> ISearchActivatedEventArgsWithLinguisticDetails: ...

class IShareTargetActivatedEventArgs(winsdk.system.Object):
    share_operation: typing.Optional[winsdk.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IShareTargetActivatedEventArgs: ...

class IStartupTaskActivatedEventArgs(winsdk.system.Object):
    task_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IStartupTaskActivatedEventArgs: ...

class IToastNotificationActivatedEventArgs(winsdk.system.Object):
    argument: str
    user_input: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IToastNotificationActivatedEventArgs: ...

class IUserDataAccountProviderActivatedEventArgs(winsdk.system.Object):
    operation: typing.Optional[winsdk.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IUserDataAccountProviderActivatedEventArgs: ...

class IViewSwitcherProvider(winsdk.system.Object):
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IViewSwitcherProvider: ...

class IVoiceCommandActivatedEventArgs(winsdk.system.Object):
    result: typing.Optional[winsdk.windows.media.speechrecognition.SpeechRecognitionResult]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IVoiceCommandActivatedEventArgs: ...

class IWalletActionActivatedEventArgs(winsdk.system.Object):
    action_id: str
    action_kind: winsdk.windows.applicationmodel.wallet.WalletActionKind
    item_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IWalletActionActivatedEventArgs: ...

class IWebAccountProviderActivatedEventArgs(winsdk.system.Object):
    operation: typing.Optional[winsdk.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IWebAccountProviderActivatedEventArgs: ...

class IWebAuthenticationBrokerContinuationEventArgs(winsdk.system.Object):
    web_authentication_result: typing.Optional[winsdk.windows.security.authentication.web.WebAuthenticationResult]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: winsdk.system.Object, /) -> IWebAuthenticationBrokerContinuationEventArgs: ...

